
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id          String   @id @db.Uuid
  user_id     String?  @db.Uuid
  action      String   @db.VarChar(100)
  entity_type String?  @db.VarChar(50)
  entity_id   String?  @db.Uuid
  old_values  Json?
  new_values  Json?
  ip_address  String?  @db.Inet
  user_agent  String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users?   @relation(fields: [user_id], references: [id])

  @@index([action], map: "idx_audit_action")
  @@index([created_at(sort: Desc)], map: "idx_audit_created")
  @@index([entity_type, entity_id], map: "idx_audit_entity")
  @@index([user_id], map: "idx_audit_user")
}

model email_verifications {
  id          String    @id @db.Uuid
  user_id     String    @db.Uuid
  token       String    @unique @db.VarChar(255)
  expires_at  DateTime  @db.Timestamptz(6)
  verified_at DateTime? @db.Timestamptz(6)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([expires_at], map: "idx_email_verif_expires")
  @@index([token], map: "idx_email_verif_token")
  @@index([user_id], map: "idx_email_verif_user")
}

model institutes {
  id          String   @id @db.Uuid
  name        String   @db.VarChar(255)
  city        String   @db.VarChar(100)
  postal_code String   @db.VarChar(10)
  state       String?  @db.VarChar(100)
  country     String   @default("India") @db.VarChar(100)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  teams       teams[]

  @@unique([name, city])
  @@index([city])
  @@index([is_active])
}

model password_reset_tokens {
  id         String    @id @db.Uuid
  user_id    String    @db.Uuid
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([expires_at], map: "idx_password_reset_expires")
  @@index([token], map: "idx_password_reset_token")
  @@index([user_id], map: "idx_password_reset_user")
}

model team_members {
  id                                    String                @id @db.Uuid
  user_id                               String                @db.Uuid
  team_id                               String                @db.Uuid
  join_date                             DateTime              @default(now()) @db.Timestamptz(6)
  is_approved                           Boolean               @default(false)
  approved_at                           DateTime?             @db.Timestamptz(6)
  approved_by                           String?               @db.Uuid
  is_active                             Boolean               @default(true)
  left_at                               DateTime?             @db.Timestamptz(6)
  created_at                            DateTime              @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime              @default(now()) @db.Timestamptz(6)
  designation                           TeamMemberDesignation
  users_team_members_approved_byTousers users?                @relation("team_members_approved_byTousers", fields: [approved_by], references: [id])
  teams                                 teams                 @relation(fields: [team_id], references: [id], onDelete: Cascade)
  users_team_members_user_idTousers     users                 @relation("team_members_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, team_id])
  @@index([is_active], map: "idx_team_members_active")
  @@index([is_approved], map: "idx_team_members_approved")
  @@index([designation], map: "idx_team_members_designation")
  @@index([team_id], map: "idx_team_members_team")
  @@index([user_id], map: "idx_team_members_user")
}

model teams {
  id                        String         @id @db.Uuid
  team_name                 String         @unique @db.VarChar(255)
  institute_id              String         @db.Uuid
  team_code                 String?        @unique @db.VarChar(50)
  max_members               Int            @default(10)
  is_registration_complete  Boolean        @default(false)
  registration_completed_at DateTime?      @db.Timestamptz(6)
  is_active                 Boolean        @default(true)
  created_at                DateTime       @default(now()) @db.Timestamptz(6)
  updated_at                DateTime       @default(now()) @db.Timestamptz(6)
  metadata                  Json           @default("{}")
  category                  TeamCategory
  team_members              team_members[]
  institutes                institutes     @relation(fields: [institute_id], references: [id])

  @@index([is_active], map: "idx_teams_active")
  @@index([category], map: "idx_teams_category")
  @@index([created_at(sort: Desc)], map: "idx_teams_created_at")
  @@index([institute_id], map: "idx_teams_institute")
  @@index([is_registration_complete], map: "idx_teams_registration")
}

model user_sessions {
  id                       String    @id @db.Uuid
  user_id                  String    @db.Uuid
  session_token            String    @unique @db.VarChar(500)
  refresh_token            String?   @unique @db.VarChar(500)
  ip_address               String?   @db.Inet
  user_agent               String?
  expires_at               DateTime  @db.Timestamptz(6)
  refresh_token_expires_at DateTime? @db.Timestamptz(6)
  is_active                Boolean   @default(true)
  created_at               DateTime  @default(now()) @db.Timestamptz(6)
  last_accessed_at         DateTime  @default(now()) @db.Timestamptz(6)
  users                    users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([is_active, expires_at], map: "idx_sessions_active")
  @@index([expires_at], map: "idx_sessions_expires")
  @@index([session_token], map: "idx_sessions_token")
  @@index([user_id], map: "idx_sessions_user")
}

model users {
  email                                        String                  @unique @db.VarChar(255)
  alternate_phone                              String?                 @db.VarChar(20)
  created_at                                   DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at                                   DateTime?               @db.Timestamptz(6)
  full_name                                    String                  @db.VarChar(255)
  is_active                                    Boolean                 @default(true)
  is_deleted                                   Boolean                 @default(false)
  is_email_verified                            Boolean                 @default(false)
  is_phone_verified                            Boolean                 @default(false)
  last_login_at                                DateTime?               @db.Timestamptz(6)
  locked_until                                 DateTime?               @db.Timestamptz(6)
  login_attempts                               Int                     @default(0)
  metadata                                     Json                    @default("{}")
  password_changed_at                          DateTime                @default(now()) @db.Timestamptz(6)
  password_hash                                String                  @db.VarChar(255)
  phone_country_code                           String                  @default("+91") @db.VarChar(5)
  phone_number                                 String                  @db.VarChar(20)
  updated_at                                   DateTime                @default(now()) @db.Timestamptz(6)
  id                                           String                  @id @db.Uuid
  audit_logs                                   audit_logs[]
  email_verifications                          email_verifications[]
  password_reset_tokens                        password_reset_tokens[]
  team_members_team_members_approved_byTousers team_members[]          @relation("team_members_approved_byTousers")
  team_members_team_members_user_idTousers     team_members[]          @relation("team_members_user_idTousers")
  user_sessions                                user_sessions[]

  @@index([is_active], map: "idx_users_active")
  @@index([created_at(sort: Desc)], map: "idx_users_created_at")
  @@index([email], map: "idx_users_email")
  @@index([last_login_at(sort: Desc)], map: "idx_users_last_login")
  @@index([phone_number], map: "idx_users_phone")
}

enum TeamCategory {
  CV
  EV
}

enum TeamMemberDesignation {
  Captain
  Manager
  Member
  Faculty_Advisor @map("Faculty Advisor")
}
